@page "/SRDashboard"

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Layouts
@using System.Timers
@inject NavigationManager NavigationManager
@inject ISalesOrderReportService SalesOrderReportService

<style>
    #control-container {
        padding: 0px !important;
    }

    #container_Series_1 {
        stroke-dasharray: 10px 10px;
        stroke-linejoin: round;
        stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    #container_Series_1_Point_3_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }

        100% {
            stroke-opacity: 0;
            stroke-width: 10px;
        }
    }
</style>
<div class="mt-3">
    <SfChart Title="Sales Gross/ Month">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
        </ChartPrimaryXAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@GrossSalesPricePerMonthData"
                         XName="GroupedFieldKey" YName="Price" Type="ChartSeriesType.Bar"></ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>
<div class="control-section" align='center'>
    <SfChart ID="container" Title="Monthly Sales for 2023" Width="@Width" Theme="@Theme">
        <ChartEvents Loaded="ChartLoaded"></ChartEvents>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="@Rotation" LabelIntersectAction="@Label">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}K" RangePadding="ChartRangePadding.None" Minimum="0" Maximum="300" Interval="50">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" Shared="true" Format="${point.x} : <b>${point.y}" Header="<b>Fruits Production</b>"></ChartTooltipSettings>
        <ChartCrosshairSettings Enable="false" LineType="LineType.Vertical">
        </ChartCrosshairSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData" XName="Period" Width="2"
                         Opacity="1" YName="Banana_ProductionRate" Type="ChartSeriesType.Line">
                <ChartMarker Visible="false" Width="7" Height="7">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartDataValues" XName="Period" Width="2"
                         Opacity="1" YName="Banana_ProductionRate" Type="ChartSeriesType.Line" DashArray="10">
                <ChartMarker Visible="false" Width="7" Height="7" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartAnnotations>
            <ChartAnnotation X=@SplineAnnotations[0].X Y=@SplineAnnotations[0].Y CoordinateUnits="Units.Point">
                <ContentTemplate>
                    <div class="@AnnotationColor" style="font-family: @FontFamily;">Actual</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation X=@SplineAnnotations[1].X Y=@SplineAnnotations[1].Y CoordinateUnits="Units.Point">
                <ContentTemplate>
                    <div class="@AnnotationColor" style="font-family: @FontFamily;">Forecast</div>
                </ContentTemplate>
            </ChartAnnotation>
        </ChartAnnotations>
    </SfChart>
</div>
<style>
    .dark {
        font-weight: bold;
        color: whitesmoke;
    }

    .light {
        font-weight: bold;
        color: black;
    }
</style>
@code {
    public string AnnotationColor = "light";
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;
    public double Rotation { get; set; } = 0;
    public string FontFamily { get; set; }
    void ChartLoaded(LoadedEventArgs args)
    {
        if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                AnnotationColor = "dark";
            }
            else
            {
                AnnotationColor = "light";
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                AnnotationColor = "dark";
            }
            else
            {
                AnnotationColor = "light";
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                AnnotationColor = "dark";
            }
            else
            {
                AnnotationColor = "light";
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                AnnotationColor = "dark";
            }
            else
            {
                AnnotationColor = "light";
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            AnnotationColor = "light";
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                AnnotationColor = "dark";
            }
            else
            {
                AnnotationColor = "light";
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                AnnotationColor = "dark";
            }
            else
            {
                AnnotationColor = "light";
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            AnnotationColor = "dark";
        }
        else
        {
            AnnotationColor = "light";
        }
        StateHasChanged();
    }
    public class AnnotationData
    {
        public string X { get; set; }
        public string Y { get; set; }
        public bool Visible { get; set; }
    }
    public List<AnnotationData> SplineAnnotations = new List<AnnotationData> {
        new AnnotationData() { Visible = true, X = "Feb", Y = "125" },
        new AnnotationData() { Visible = true, X = "Aug", Y = "210" },
    };
    public List<LineChartData> ChartData = new List<LineChartData>
    {
        new LineChartData { Period = "Jan", Banana_ProductionRate = 100 },
        new LineChartData { Period = "Feb", Banana_ProductionRate = 110 },
        new LineChartData { Period = "Mar", Banana_ProductionRate = 125 },
        new LineChartData { Period = "Apr", Banana_ProductionRate = 150 },
        new LineChartData { Period = "May", Banana_ProductionRate = 140 },
        new LineChartData { Period = "Jun", Banana_ProductionRate = 160 }
    };
    public List<LineChartData> ChartDataValues = new List<LineChartData>
    {
        new LineChartData { Period = "Jun", Banana_ProductionRate = 160 },
        new LineChartData { Period = "Jul", Banana_ProductionRate = 170 },
        new LineChartData { Period = "Aug", Banana_ProductionRate = 180 },
        new LineChartData { Period = "Sep", Banana_ProductionRate = 190 },
        new LineChartData { Period = "Oct", Banana_ProductionRate = 200 },
        new LineChartData { Period = "Nov", Banana_ProductionRate = 230 },
        new LineChartData { Period = "Dec", Banana_ProductionRate = 270 }
    };
    public class LineChartData
    {
        public string Period { get; set; }
        public double Banana_ProductionRate { get; set; }
        public double Apple_ProductionRate { get; set; }
    }
    
    List<GroupFieldPriceModel> GrossSalesPricePerMonthData { get; set; }
    List<GroupFieldQtyModel> GroupedFieldQtyData { get; set; }




    protected override async Task OnInitializedAsync()
    {
        GrossSalesPricePerMonthData = await SalesOrderReportService.GetEmployeePricePerMonthData();
        GroupedFieldQtyData = await SalesOrderReportService.GetQtyPerProductCategory();


    }

}